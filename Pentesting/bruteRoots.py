#!/usr/bin/env python3.6
# bruteRoots - a simple tool to look for just-below-root directories on a webserver.
# Requires an external wordlist.

# Begin Config Block
pathWords = "/home/patches/Downloads/asciiwords.txt"  # Absolute path to the wordlist - a text file with words seperated by newlines.
pathReports = "/home/patches/Documents/bruteRoot Reports/"  # Path to the reporting dir used by default

# Begin Import Block
import argparse
import http.client as http
import os
import sys
import time
import datetime as dt

# Def Classes
class simpleLogger:  # dedicated skip-logging handler for use in buildBlocks
    def __init__(self, landingdir,name):  # starts the skiplogger and tells it it will be writing to landingdir with name
        landingAbs = os.path.join(landingdir, name)
        if not os.path.exists(landingdir):
            os.makedirs(landingdir)
        self.loggerfile = open(landingAbs, "w")  # This will REPLACE the existing logfile with the new one so be careful
        self.loggerfile.write("This file is a log of directories discovered at the target domain, listed below. Complete stats of the test can be found at the end. \n")
        self.loggerfile.write("\n\n\n")
        self.loggerfile.write("===============")
        global target
        self.loggerfile.write("\nDomain Under Test: %s \n" % target)
        self.loggerfile.write("===============\n\n\n")

    def log(self, foo):  # Formats foo nicely and adds it to the log
        self.loggerfile.write(foo + '\n')

    def save(self):  # saves the file to disk. Once used you have to re-instance the logger
        self.loggerfile.write("\n")
        self.loggerfile.write("This test was run on " + str(dt.date.today()))
        self.loggerfile.flush()
        self.loggerfile.close()

# Def Funcs
def statusPrint():
    global tested; global found
    text = ("\rFound %s possible directories in %s attempts" % (found, tested))
    sys.stdout.write(text)
    sys.stdout.flush

def elapsed(start):  #Quickly calculate the elapsed time between two points, to feed to the logger. Returns it formatted nicely.
    current = time.monotonic()
    secElapsed = current - start
    strElapsed = time.strftime("%H:%M:%S", time.gmtime(secElapsed))
    return strElapsed

# Def Runtime
print("Welcome to bruteRoots.py. Beginning tests.")
start = time.monotonic()
parser = argparse.ArgumentParser()
parser.add_argument('tgt', help="Provide the target for the test as an argument")
args = parser.parse_args()
target = str(args.tgt)
print("The target is: %s" % target)
logs = simpleLogger(pathReports, (target+str(dt.date.today())+".txt"))

httpConn = http.HTTPSConnection(target)
httpConn.request("GET", "/")  # Start with a simple connection to confirm connected.
r1 = httpConn.getresponse()

if r1.status == 200 or 301:
    print("Connection Established, beginning test. This may take some time.")
    logs.log("Connection established to target, beginning test.")
else:
    print("An error has occurred. Double check the target was entered correctly. If message persists, check the logs for details.")
    logs.log("[ERROR] Initial Connection Failed - HTTP Error %s" % r1.status)
    logs.log("Error is fatal, session terminated.")
    logs.save()
    exit()

try:
    fileWords = open(pathWords, "r")
except FileNotFoundError:
    print("Missing wordlist. Check the config and your filesystem and run again.")
    logs.log("[ERROR] No wordlist found, Terminating.")
    logs.save()
    exit()

global found; found = 0
global tested; tested = 0
logs.log("\n Following are all directories confirmed beneath the root of the target:")

for word in fileWords:  # Iterates over each line in the file.
    word = word.rstrip()
    tested += 1
    statusPrint()
    httpConn = http.HTTPSConnection(target)
    httpConn.request("GET", "/"+word+"/", encode_chunked=True)
    r1 = httpConn.getresponse()
    if (r1.status == 200) or (r1.status == 301):
        found += 1
        logs.log(word)

print("\nEnd of Wordlist, Exiting. The list of found valid paths is in your log.")
logs.log("\n------")
logs.log("Time elapsed: %s" % elapsed(start))
logs.log("Words Attempted: %s" % tested)
logs.log("Directories Found: %s" % found)
logs.save()